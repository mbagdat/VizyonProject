@*@model List<Sektor>*@
@using NewVizyonProject.Models.ViewModel
@model SektorVeKonuViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_IndexLayout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Vizyon Project</title>

    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />

    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="~/Ajax/SektorSave.js"></script>
    <script src="~/Ajax/SektorUpdate.js"></script>
    <script src="~/Ajax/SektorDelete.js"></script>
</head>

<body>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <div id="container" style="width:50%;">
        <button style="margin-left:200px;" type="button" class="btn btn-outline-info" data-toggle="modal" data-target="#mySaveModal">Yeni Sektör Kaydet</button>

        <br /><br />

        <div class="form-horizontal" style="margin-left:200px; margin-top:50px;">
            <div class="form-group">
                <div class="col-md-10" style="width:280px;">
                    @Html.DropDownList("DrpSektor", ViewBag.sektorData, "---Sektör Seçiniz", new { @class = "form-control dropdown" })
                </div>
            </div>
        </div>
    </div>
    @if (Model != null)
    {

        if (Model.sektors.Count != 0)
        {
            <table class="table table-bordered col-md-12" id="table" style="width:50%;margin-left:490px; margin-top:50px;">
                <tr style="font-weight:bold;">
                    <td class="col-md-4">Id</td>
                    <td class="col-md-4">Sektor Adı</td>
                    <td class="col-md-1">Sil</td>
                    <td class="col-md-1">Güncelle</td>
                </tr>
                @foreach (var item in Model.sektors)
                {
                    <tr>
                        <td>@item.SektorId</td>
                        <td>@item.SektorAdi</td>
                        <td><button class="btn btn-danger" onclick="ConfirmDelete('@item.SektorAdi','@item.SektorId')"><span class="glyphicon glyphicon-trash" aria-hidden="true"></button></td>
                        <td><button class="btn btn-success" onclick="openDetail('@item.SektorAdi',@item.SektorId)"><span class="glyphicon glyphicon-edit"></span></button></td>
                    </tr>
                }
            </table>
            @*<div id="pageNavPosition" class="pager-nav"></div>*@
        }
    }
</body>
</html>


@Html.Partial("_DeleteSektor")
@Html.Partial("_UpdateSektor")
@Html.Partial("_CreateSektor")


@*<style>
    body {
        background-color: #fff;
        color: #24292e;
        font-family: "Poppins", -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif;
        font-size: 14px;
        line-height: 1.5;
    }



    .pager-nav {
        margin: 16px 0;
    }

        .pager-nav span {
            display: inline-block;
            padding: 4px 8px;
            margin: 1px;
            cursor: pointer;
            font-size: 14px;
            background-color: #FFFFFF;
            border: 1px solid #e1e1e1;
            border-radius: 3px;
            box-shadow: 0 1px 1px rgba(0,0,0,.04);
        }

            .pager-nav span:hover,
            .pager-nav .pg-selected {
                background-color: #f9f9f9;
                border: 1px solid #CCCCCC;
            }
</style>

<script>


    function Pager(tableName, itemsPerPage) {
        'use strict';

        this.tableName = tableName;
        this.itemsPerPage = itemsPerPage;
        this.currentPage = 1;
        this.pages = 0;
        this.inited = false;

        this.showRecords = function (from, to) {
            let rows = document.getElementById(tableName).rows;

            for (let i = 1; i < rows.length; i++) {
                if (i < from || i > to) {
                    rows[i].style.display = 'none';
                } else {
                    rows[i].style.display = '';
                }
            }
        };

        this.showPage = function (pageNumber) {
            if (!this.inited) {
                return;
            }

            let oldPageAnchor = document.getElementById('pg' + this.currentPage);
            oldPageAnchor.className = 'pg-normal';

            this.currentPage = pageNumber;
            let newPageAnchor = document.getElementById('pg' + this.currentPage);
            newPageAnchor.className = 'pg-selected';

            let from = (pageNumber - 1) * itemsPerPage + 1;
            let to = from + itemsPerPage - 1;
            this.showRecords(from, to);

            let pgNext = document.querySelector('.pg-next'),
                pgPrev = document.querySelector('.pg-prev');

            if (this.currentPage == this.pages) {
                pgNext.style.display = 'none';
            } else {
                pgNext.style.display = '';
            }

            if (this.currentPage === 1) {
                pgPrev.style.display = 'none';
            } else {
                pgPrev.style.display = '';
            }
        };

        this.prev = function () {
            if (this.currentPage > 1) {
                this.showPage(this.currentPage - 1);
            }
        };

        this.next = function () {
            if (this.currentPage < this.pages) {
                this.showPage(this.currentPage + 1);
            }
        };

        this.init = function () {
            let rows = document.getElementById(tableName).rows;
            let records = (rows.length - 1);

            this.pages = Math.ceil(records / itemsPerPage);
            this.inited = true;
        };

        this.showPageNav = function (pagerName, positionId) {
            if (!this.inited) {
                return;
            }

            let element = document.getElementById(positionId),
                pagerHtml = '<span onclick="' + pagerName + '.prev();" class="pg-normal pg-prev">&#171;</span>';

            for (let page = 1; page <= this.pages; page++) {
                pagerHtml += '<span id="pg' + page + '" class="pg-normal pg-next" onclick="' + pagerName + '.showPage(' + page + ');">' + page + '</span>';
            }

            pagerHtml += '<span onclick="' + pagerName + '.next();" class="pg-normal">&#187;</span>';

            element.innerHTML = pagerHtml;
        };
    }



    //
    let table = new Pager('table', 2);

    table.init();
    table.showPageNav('table', 'pageNavPosition');
    table.showPage(1);
</script>*@
